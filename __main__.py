import telebot
from telebot import types
import customer
import driver
import psycopg2
from psycopg2 import Error
import time
import threading
import re
import asyncio

bot = telebot.TeleBot('1618386430:AAF_-TsdAqRYckgTA3rMMopDJWkJa3wRCAI')

categories = ['A', 'B', 'C', 'D', 'E']
default_price = 3000 #—Ç–µ–Ω–≥–µ
sleep_driver= 3600 #—Å–µ–∫—É–Ω–¥—ã
sleep_time = 300 #—Å–µ–∫—É–Ω–¥—ã
all_ = {}
# drivers = {}
phone_pattern = r'\b\+?[7,8]7(\s*\d{2}\s*\d{3}\s*\d{2}\s*\d{2})\b'

#-------------------------------–ë–î-------------------------------------------
conn = psycopg2.connect(dbname='postgres', user='postgres', password='HamiT181', host="localhost")
cursor=conn.cursor()

def select_from_db_drivers(cursor):
    cursor.execute('SELECT * FROM public.drivers')
    records = cursor.fetchall()

def select_from_db_clients(cursor):
    cursor.execute('SELECT * FROM public.clients')
    records = cursor.fetchall()

def insert_into_db_clients(user):
    DB = f"""INSERT INTO public.clients(chat_id, category, transmission, phone, username, price, location, location_togo)
    VALUES ({user.chat_id}, '{user.category}', '{user.transmission}', {user.phone}, '{user.username}', {user.price},
    ARRAY{[user.location.longitude, user.location.latitude]}, ARRAY{[user.location_togo.longitude, user.location_togo.latitude]})"""
    cursor.execute(DB)
    conn.commit()

def insert_into_db_drivers(user):
    cursor.execute(f"SELECT chat_id FROM public.drivers WHERE chat_id = {user.chat_id}")
    drivers = cursor.fetchall()
    if len(drivers) > 0:
        DB = f"""UPDATE public.drivers
        SET category=ARRAY{user.category}, phone={user.phone}, username='{user.username}', transmission='{user.transmission}', ready=true
        WHERE chat_id = {user.chat_id}"""
    else:
        DB = f"""INSERT INTO public.drivers(chat_id, category, transmission, phone, username, ready)
        VALUES ({user.chat_id}, ARRAY{user.category}, '{user.transmission}', {user.phone}, '{user.username}', true)"""
    cursor.execute(DB)
    conn.commit()

#--------------------------–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ------------------
def other_message(message):
    keyboard0 = types.ReplyKeyboardMarkup(False, True)
    keyboard0.row('–ú–Ω–µ –Ω—É–∂–µ–Ω —Ç—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å!', '–Ø —Ç—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å! (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)')
    bot.send_message(message.chat.id, '–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞... ;)', reply_markup=keyboard0)

def correct_phone(message):
    if message.contact != None:
        phone = f'{message.contact.phone_number[-10:]}'
    else:
        phone = f'{message.text[-10:]}'
    return phone

#------------------------------------------------------------------
def wait_for_driver (driver_id):
    time.sleep(sleep_driver)
    cursor.execute(f"UPDATE public.drivers SET ready = true WHERE chat_id = '{driver_id}'")
    conn.commit()
    
async def send_contacts (client_id):
    await asyncio.sleep(sleep_time)
    driver_id = all_[client_id].drivers_id
    if driver_id == None:
        bot.send_message(client_id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–Ω—è—Ç—ã, –ª–∏–±–æ –¥–∞–ª–µ–∫–æ.\n' \
            '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—à–µ–π —É—Å–ª—É–≥–æ–π –ø–æ–∑–∂–µ, —Å–ø–∞—Å–∏–±–æ')
        return
    cursor.execute(f"""SELECT phone, username FROM public.drivers WHERE chat_id = '{driver_id}'""")
    driver = cursor.fetchone()
    bot.send_message(client_id, f'—Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ–¥–∏—Ç–µ–ª—è - +7{driver[0]} \n–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –æ–Ω —Å–∫–æ—Ä–æ –ø—Ä–∏–µ–¥–µ—Ç üòÄ' \
        '\n–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–µ–π —É—Å–ª—É–≥–æ–π. –ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –º–µ–Ω—è (–±–æ—Ç–∞) –¥—Ä—É–≥—É')
    bot.send_message(driver_id, f'—Ç–µ–ª–µ—Ñ–æ–Ω –∞–≤—Ç–æ–≤–ª–∞–¥–µ–ª—å—Ü–∞ - +7{all_[client_id].phone}')
    cursor.execute(f"UPDATE public.drivers SET ready = false WHERE chat_id = '{driver_id}'")
    conn.commit()
    thread=threading.Thread(target=wait_for_driver, args=[driver_id])
    thread.start()
    # drivers = []
    all_[client_id] = None
    del all_[client_id]

def get_all_drivers (chat_id):
    if all_[chat_id].transmission == "–ú–ö–ü–ü":
        cursor.execute(f"""SELECT chat_id
	    FROM public.drivers
	    WHERE transmission = '{'–ê–ö–ü–ü + –ú–ö–ü–ü'}' and '{all_[chat_id].category}' = ANY(category) and ready = true""")
    else:
        cursor.execute(f"""SELECT chat_id
	    FROM public.drivers
	    WHERE '{all_[chat_id].category}' = ANY(category) and ready = true""")
    all_drivers = cursor.fetchall()
    return all_drivers

def send_msg_to_drivers(all_drivers, chat_id):
    for el in all_drivers:
        if el[0] not in all_:
            bot.send_message(el[0], '–ï—Å—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø–µ—Ä–µ–≥–æ–Ω –º–∞—à–∏–Ω—ã –æ—Ç:')
            bot.send_location(el[0], all_[chat_id].location.latitude, all_[chat_id].location.longitude)
            bot.send_message(el[0], '–∏ –¥–æ –º–µ—Å—Ç–∞:')
            bot.send_location(el[0], all_[chat_id].location_togo.latitude, all_[chat_id].location_togo.longitude)
            sended_message = bot.send_message(el[0], f'–ì–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å {all_[chat_id].price}.' \
                f'–ï—Å–ª–∏ –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ {sleep_time//60} –º–∏–Ω—É—Ç')
            drivers = {}
            drivers[el[0]] = driver.driver(bot, chat_id=el[0])
            drivers[el[0]].message_id = sended_message.message_id
            drivers[el[0]].progress = 'sended order'
            drivers[el[0]].client_id = chat_id
    all_[chat_id].offered_drivers = drivers
    asyncio.run(send_contacts(chat_id))

def findDriver(chat_id, message_id = None):
    if message_id == None:
        return None
    for key1, client in all_.items():
        if not client.offered_drivers:
            continue
        for key2, driver in client.offered_drivers.items():
            if driver.chat_id == chat_id and driver.message_id == message_id:
                return driver
    return None

#--------------------------–æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã------------------
@bot.message_handler(commands=['start'])
def start_message(message):
    if message.chat.id in all_:
        all_[message.chat.id] = None
        del all_[message.chat.id]
    keyboard0 = types.ReplyKeyboardMarkup(False, True)
    keyboard0.row('–ú–Ω–µ –Ω—É–∂–µ–Ω —Ç—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å!', '–Ø —Ç—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å! (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)')
    bot.send_message(message.chat.id, '–í–∞–º –Ω—É–∂–µ–Ω —Ç—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å? –ò–ª–∏ –≤—ã —Å–∞–º–∏ —Ç—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å?', reply_markup=keyboard0)

@bot.message_handler(commands=['start_work'])
def order_message(message):
    cursor.execute(f"UPDATE public.drivers SET ready = true WHERE chat_id = {message.chat.id}")
    conn.commit()

@bot.message_handler(commands=['stop_work'])
def unorder_message(message):
    cursor.execute(f"UPDATE public.drivers SET ready = false WHERE chat_id = {message.chat.id}")
    conn.commit()

@bot.message_handler(commands=['faq'])
def faq_message(message):
    bot.send_message(message.chat.id, '—Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è........')

@bot.message_handler(commands=['about'])
def about_message(message):
    bot.send_message(message.chat.id, '—Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–µ—Ç—Å—è....')

@bot.message_handler(commands=['help'])
def help_message(message):
    keyboard = types.InlineKeyboardMarkup()
    item1 = types.InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='/start')
    item2 = types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='/help')
    item3 = types.InlineKeyboardButton('–û –±–æ—Ç–µ', callback_data='/about')
    item4 = types.InlineKeyboardButton('–ß–ê–í–û / FAQ', callback_data='/faq')
    keyboard.add(item1, item2, item3, item4, row_width=2)
    bot.send_message(message.chat.id, f'–¶–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∫–≤–∞–¥—Ä–∞—Ç–∞ –ê–ª—å—Ñ–∞—Ä–∞–±–∏, –°–∞–∏–Ω–∞, –†—ã—Å–∫—É–ª–æ–≤–∞, –í–û–ê–î = {default_price}')
    bot.send_message(message.chat.id, '–í–æ–¥–∏—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –µ—Ö–∞—Ç—å, –µ—Å–ª–∏ –µ–≥–æ —á—Ç–æ-—Ç–æ –Ω–µ —É—Å—Ç—Ä–æ–∏—Ç.' \
        '\n–ü—Ä–∏ —ç—Ç–æ–º –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–ª–æ –≤—ã–∑—ã–≤–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è.')
    bot.send_message(message.chat.id, '–¢–∞–∫ –∂–µ –∏ —Ö–æ–∑—è–∏–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —á—Ç–æ-—Ç–æ –Ω–µ —É—Å—Ç—Ä–æ–∏—Ç.' \
        '\n–ü—Ä–∏ —ç—Ç–æ–º –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–ª–æ –ø–æ–ª—É—á–∞—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–∫–∞–∑.')
    bot.send_message(message.chat.id, '–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Ç–∞–∫ –∏ —Ö–æ–∑—è–µ–≤ –∞–≤—Ç–æ–º–∞—à–∏–Ω,' \
        '—Å–æ–±–ª—é–¥–∞–π—Ç–µ –ü–î–î.', reply_markup=keyboard)

#--------------------------–ø—Ä–æ—Å–ª—É—à–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π------------------
@bot.message_handler(content_types=['text', 'location', 'contact'])
def main_handler(message):
    chat_id = message.chat.id
    replied_driver = None
    #--------------------------–ø–µ—Ä–≤–æ–µ –¥–ª—è –≤–æ–¥–∏–ª –Ω–∞ –∑–∞–∫–∞–∑------------------
    try:
        replied_driver = findDriver(chat_id, message.reply_to_message.id)
        if replied_driver != None and chat_id not in all_:
            if replied_driver.progress == 'sended order' and message.location != None:
                try:
                    if replied_driver != None:
                        replied_driver.location = message.location
                        bot.send_message(chat_id, f'–ü–æ–Ω—è–ª –í–∞—Å, –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è! \n –ï—Å–ª–∏ –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ {sleep_time//60}' \
                            '–º–∏–Ω—É—Ç –Ω–µ –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –≤—ã–±—Ä–∞–ª–∏ –¥—Ä—É–≥–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è')
                        client_id = replied_driver.client_id
                        distance = (all_[client_id].location.latitude - replied_driver.location.latitude)**2 + \
                            (all_[client_id].location.longitude - replied_driver.location.longitude)**2
                        all_[client_id].distance = distance if distance <= all_[client_id].distance else all_[client_id].distance
                        all_[client_id].drivers_id = chat_id if distance <= all_[client_id].distance else all_[client_id].drivers_id
                except:
                    bot.send_message(chat_id, '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –û–¢–í–ï–¢–û–ú –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        else:
            raise Exception()
    except:
        if chat_id in all_:
            #--------------------------–ø–æ–≤—Ç–æ—Ä –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤--------------
            if all_[chat_id].progress == 'select transmission' and all_[chat_id].type_ == 'need':
                bot.send_message(chat_id, '–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É –ø–µ—Ä–µ–¥–∞—á –∞–≤—Ç–æ')
                all_[chat_id].send_transmission_request(message)
            elif all_[chat_id].progress == 'select category' and all_[chat_id].type_ == 'need':
                bot.send_message(chat_id, '–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ')
                all_[chat_id].send_category_request(all_[chat_id].transmission, chat_id)
            elif all_[chat_id].progress == 'send phone' and all_[chat_id].type_ == 'need' and \
                message.contact == None and not re.search(phone_pattern, message.text):
                bot.send_message(chat_id, '–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
                all_[chat_id].send_phone_request(message, all_[chat_id].category)
            elif all_[chat_id].progress == 'send location' and all_[chat_id].type_ == 'need' and \
                message.location == None:
                bot.send_message(chat_id, '–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–µ–Ω–∏–µ')
                all_[chat_id].send_location_request(message, all_[chat_id].phone)
            elif all_[chat_id].progress == 'send location_togo' and all_[chat_id].type_== 'need' and \
                message.location == None:
                bot.send_message(chat_id, '–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?')
                all_[chat_id].send_location_togo_request(message, all_[chat_id].location)
            elif all_[chat_id].progress == 'send price' and all_[chat_id].type_ == 'need':
                if message.text.isdigit() and int(message.text) >= default_price:
                    all_[chat_id].send_final_message(message.text, chat_id)
                    insert_into_db_clients(all_[chat_id])
                    thread=threading.Thread(target=send_msg_to_drivers, args=(get_all_drivers(chat_id), chat_id))
                    thread.start()
                else:
                    all_[chat_id].send_own_price_request(message, all_[chat_id].location_togo)
            elif all_[chat_id].progress == 'send own price' and all_[chat_id].type_ == 'need':
                all_[chat_id].send_own_price_request(message, all_[chat_id].location_togo)
            elif all_[chat_id].progress == 'send final' and all_[chat_id].type_ == 'need':
                bot.send_message(chat_id, '–ò—â—É –≤–æ–¥–∏—Ç–µ–ª—è! \n–ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤—ã–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ /start' \
                    '\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ–º–æ—â—å /help –∏–ª–∏ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –±–æ—Ç–µ /about')
            
            #---------------------------–ø–æ–≤—Ç–æ—Ä –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π---------------
            elif all_[chat_id].progress == 'select transmission' and all_[chat_id].type_ == 'vodila':
                bot.send_message(chat_id, '–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?')
                all_[chat_id].send_transmission_request(message)
            elif all_[chat_id].progress == 'select category' and all_[chat_id].type_ == 'vodila':
                bot.send_message(chat_id, '–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?')
                all_[chat_id].send_category_request(all_[chat_id].transmission, chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –í–£ –∏ –Ω–∞–∂–º–∏—Ç–µ –¥–∞–ª–µ–µ')
            elif all_[chat_id].progress == 'send phone' and all_[chat_id].type_ == 'vodila' and \
                message.contact == None and not re.search(phone_pattern, message.text):
                bot.send_message(chat_id, '–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?')
                all_[chat_id].send_phone_request(message, all_[chat_id].category)
            elif all_[chat_id].progress == 'send price' and all_[chat_id].type_ == 'vodila':
                bot.send_message(chat_id, '–î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ü–µ–Ω—É')
                all_[chat_id].send_price_request(message)
            elif all_[chat_id].progress == 'send final' and all_[chat_id].type_ == 'vodila':
                bot.send_message(chat_id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å! \n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Ç—Ä–µ–∑–≤–æ–≥–æ' \
                    ' –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞–∂–º–∏—Ç–µ /start \n–¢–∞–∫ –∂–µ –µ—Å—Ç—å –ø–æ–º–æ—â—å /help –∏ —Ä—É–±—Ä–∏–∫–∞ –æ –±–æ—Ç–µ /about')
            
            #--------------------------–ø–µ—Ä–≤–æ–µ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤------------------
            if all_[chat_id].progress == 'send phone' and all_[chat_id].type_ == 'need' and \
                (message.contact != None or (message.text != None and re.search(phone_pattern, message.text))):
                all_[chat_id].update_progress('send location')
                all_[chat_id].send_location_request(message, correct_phone(message))
            elif all_[chat_id].progress == 'send location' and all_[chat_id].type_ == 'need' and \
                message.location != None:
                all_[chat_id].update_progress('send location_togo')
                all_[chat_id].send_location_togo_request(message, message.location)
            elif all_[chat_id].progress == 'send location_togo' and all_[chat_id].type_== 'need' and \
                message.location != None:
                all_[chat_id].update_progress('send price')
                all_[chat_id].send_price_request(message, message.location)
            elif all_[chat_id].progress == 'send own price' and all_[chat_id].type_ == 'need':
                all_[chat_id].send_own_price_request(message, all_[chat_id].location_togo)
            
            #--------------------------–ø–µ—Ä–≤–æ–µ –¥–ª—è –≤–æ–¥–∏–ª------------------
            elif all_[chat_id].progress == 'send phone' and all_[chat_id].type_ == 'vodila' and \
                (message.contact != None or (message.text != None and re.search(phone_pattern, message.text))):
                all_[chat_id].update_progress('send final')
                all_[chat_id].send_final_message(message, correct_phone(message))
                insert_into_db_drivers(all_[chat_id])

        #--------------------------–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ other msg------------------
        if chat_id not in all_:
            if message.text == '–ú–Ω–µ –Ω—É–∂–µ–Ω —Ç—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å!':
                all_[chat_id] = customer.customer(bot, default_price)
                all_[chat_id].update_progress('select transmission')
                all_[chat_id].send_transmission_request(message)
            elif message.text == '–Ø —Ç—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å! (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)':
                all_[chat_id] = driver.driver(bot,default_price)
                all_[chat_id].update_progress('select transmission')
                all_[chat_id].send_transmission_request(message)
            elif not chat_id in all_ and replied_driver == None and all_[chat_id].progress != 'sended order':
                other_message(message)


#--------------------------–ø—Ä–æ—Å–ª—É—à–∫–∞ Call  —Å–æ–æ–±—â–µ–Ω–∏–π------------------
@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    #--------------------------–ø—Ä–æ—Å–ª—É—à–∫–∞ –∫–æ–º–∞–Ω–¥------------------
    if call.data == '/start':
        start_message(call.message)
        return
    elif call.data == '/help':
        help_message(call.message)
        return
    elif call.data == '/faq':
        faq_message(call.message)
        return
    elif call.data == '/about':
        about_message(call.message)
        return
    elif call.from_user.id not in all_ and findDriver(call.from_user.id) == None:
        other_message(call.message)
        return
    
    #--------------------------–ø—Ä–æ—Å–ª—É—à–∫–∞ call –∑–∞–∫–∞–∑—á–∏–∫–æ–≤------------------
    if call.from_user.id in all_:
        user = all_[call.from_user.id]
        if user.type_ == 'need' and user.chat_id == call.from_user.id:
            if user.progress == 'select transmission' and (call.data == '–ê–ö–ü–ü' or call.data == '–ú–ö–ü–ü'):
                user.update_progress('select category')
                user.send_category_request(call.data, call.from_user.id)
            elif user.progress == 'select category' and \
                (call.data == 'A' or call.data == 'B' or call.data == 'C' or \
                call.data == 'D' or call.data == 'E'):
                user.update_progress('send phone')
                user.send_phone_request(call.message, call.data)
            elif user.progress == 'send price' and call.data == 'own':
                user.update_progress('send own price')
            elif user.progress == 'send price' and \
                (int(call.data) == default_price or int(call.data) == default_price+500 or 
                int(call.data) == default_price+1000 or int(call.data) == default_price+1500 or
                int(call.data) == default_price+2000 or int(call.data) == 10000):
                user.update_progress('send final')
                user.send_final_message(call.data, call.from_user.id)
                insert_into_db_clients(user)
                thread=threading.Thread(target=send_msg_to_drivers, args=(get_all_drivers(user.chat_id), user.chat_id))
                thread.start()

        #--------------------------–ø—Ä–æ—Å–ª—É—à–∫–∞ call –≤–æ–¥–∏–ª------------------
        if user.type_ == 'vodila' and user.chat_id == call.from_user.id:
            if user.progress == 'select transmission' and (call.data == '–ê–ö–ü–ü' or call.data == '–ê–ö–ü–ü + –ú–ö–ü–ü'):
                user.update_progress('select category')
                user.send_category_request(call.data, call.from_user.id, '–≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –í–£')
            elif user.progress == 'select category' and call.data in categories:
                user.category_select(call.data)
                user.send_category_request(user.transmission, call.from_user.id, '–ú–æ–∂–µ—Ç —É –í–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π? –ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–∞–ª–µ–µ')
            elif user.progress == 'select category' and call.data == '–î–∞–ª–µ–µ' and any(x != '' for x in user.category):
                user.update_progress('send phone')
                user.send_phone_request(call.message, user.category)
            elif user.progress == 'select category' and call.data == '–î–∞–ª–µ–µ' and all(x == '' for x in user.category):
                user.send_category_request(user.transmission, call.from_user.id, '–í–∞–º –ù–£–ñ–ù–û –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –í–£')

bot.polling()
